#!/usr/bin/env node

// For clustering
var cluster = require('cluster');

if (cluster.isMaster) {
    console.log('Master ${process.pid} is running');

    var numCPUs = require('os').cpus().length;

    // Fork workers.
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    cluster.on('exit', (worker, code, signal) => {
            console.log('worker ${worker.process.pid} died');
            cluster.fork();
            });
} else {
    /**
     * Module dependencies.
     */

    var app = require('../src/app');
    var socketApi = require('../src/helpers/socketApi');
    var debug = require('debug')('grey:server');
    var http = require('http');

    /**
     * Get port and store in Express.
     */

    var port = normalizePort('3000');
    app.set('port', '3000');

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);
    var io = socketApi.io;
    io.attach(server);


    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }

    console.log('Worker ${worker.process.pid} started');
}
